}
lm_diagnose <- function(lm_model, name=""){
# Model Summary
#print(paste("Model:", name))
#print(paste("Resid Standard Error:", summary(lm_model)$sigma))
#print(paste("R-Squared:", summary(lm_model)$r.squared))
# Histogram Standardized Residual
#hist(resid(lm_model)/sd(resid(lm_model)), main=paste(name, "Normalized Residual Histogram"), xlab="Standardized Residual", panel.first=grid(), breaks=23)
# QQ Plot Standardized Residual
qqnorm(resid(lm_model)/sd(resid(lm_model)), cex=0.5, main=paste(name, "Normalized QQ Plot"), ylab="Standardized Residual", panel.first=grid())
qqline(resid(lm_model)/sd(resid(lm_model)), col="red")
#plot(lm_model, panel.first=grid())
}
file_in <- "../data/hv_model_daily_2019-09.csv"
df <- read.csv(file_in)
setwd("~/Desktop/CS_238/Final_Project/HomeReinforcementLearning/hv_model")
#rm(list=ls())
library(ggplot2)
library(dplyr)
library(tidyverse)
library(plotly)
library(AppliedPredictiveModeling)
library(caret)
#library(e1071)
library(earth)
#library(leaps)
#library(boot)
#library(kernlab)
#library(randomForest)
library(hash)
get_m_params <- function(m){
if ("hdd_0" %in% rownames(summary(m)$coefficients)){
h_coef <- summary(m)$coefficients["hdd_0",1]
h_p <- summary(m)$coefficients["hdd_0",4]
}
else {
h_coef <- NA
h_p <- NA
}
if ("cdd_0" %in% rownames(summary(m)$coefficients)){
c_coef <- summary(m)$coefficients["cdd_0",1]
c_p <- summary(m)$coefficients["cdd_0",4]
}
else {
c_coef <- NA
c_p <- NA
}
intercept <- summary(m)$coefficients["(Intercept)",1]
r2 <- summary(m)$r.squared
rse <- summary(m)$sigma
m_values <- c(h_coef, c_coef, h_p, c_p, r2, rse, intercept)
return(m_values)
}
lm_diagnose <- function(lm_model, name=""){
# Model Summary
#print(paste("Model:", name))
#print(paste("Resid Standard Error:", summary(lm_model)$sigma))
#print(paste("R-Squared:", summary(lm_model)$r.squared))
# Histogram Standardized Residual
#hist(resid(lm_model)/sd(resid(lm_model)), main=paste(name, "Normalized Residual Histogram"), xlab="Standardized Residual", panel.first=grid(), breaks=23)
# QQ Plot Standardized Residual
qqnorm(resid(lm_model)/sd(resid(lm_model)), cex=0.5, main=paste(name, "Normalized QQ Plot"), ylab="Standardized Residual", panel.first=grid())
qqline(resid(lm_model)/sd(resid(lm_model)), col="red")
#plot(lm_model, panel.first=grid())
}
file_in <- "../data/hv_model_daily_2019-09.csv"
df <- read.csv(file_in)
#rm(list=ls())
library(ggplot2)
library(dplyr)
library(tidyverse)
library(plotly)
library(AppliedPredictiveModeling)
library(caret)
#library(e1071)
library(earth)
#library(leaps)
#library(boot)
#library(kernlab)
#library(randomForest)
library(hash)
get_m_params <- function(m){
if ("hdd_0" %in% rownames(summary(m)$coefficients)){
h_coef <- summary(m)$coefficients["hdd_0",1]
h_p <- summary(m)$coefficients["hdd_0",4]
}
else {
h_coef <- NA
h_p <- NA
}
if ("cdd_0" %in% rownames(summary(m)$coefficients)){
c_coef <- summary(m)$coefficients["cdd_0",1]
c_p <- summary(m)$coefficients["cdd_0",4]
}
else {
c_coef <- NA
c_p <- NA
}
intercept <- summary(m)$coefficients["(Intercept)",1]
r2 <- summary(m)$r.squared
rse <- summary(m)$sigma
m_values <- c(h_coef, c_coef, h_p, c_p, r2, rse, intercept)
return(m_values)
}
lm_diagnose <- function(lm_model, name=""){
# Model Summary
#print(paste("Model:", name))
#print(paste("Resid Standard Error:", summary(lm_model)$sigma))
#print(paste("R-Squared:", summary(lm_model)$r.squared))
# Histogram Standardized Residual
#hist(resid(lm_model)/sd(resid(lm_model)), main=paste(name, "Normalized Residual Histogram"), xlab="Standardized Residual", panel.first=grid(), breaks=23)
# QQ Plot Standardized Residual
qqnorm(resid(lm_model)/sd(resid(lm_model)), cex=0.5, main=paste(name, "Normalized QQ Plot"), ylab="Standardized Residual", panel.first=grid())
qqline(resid(lm_model)/sd(resid(lm_model)), col="red")
#plot(lm_model, panel.first=grid())
}
file_in <- "../data/hv_model_2019-09.csv"
df <- read.csv(file_in)
m_summary <- data.frame(hdd_coef = double(),
cdd_coef = double(),
hdd_p = double(),
cdd_p = double(),
r_square = double(),
RSE = double(),
intercept = double()
)
models <- hash() # hash object containing all model objects
for (rlid in unique(df$RLID)){
# Filter dataset for current RLID
tmp <- df[df$RLID == rlid, ]
# Fit linear model
m <- lm(hvac_kWh ~ cdd_0 + hdd_0, data=tmp)
# Save Model Results
models[[rlid]] <- m
m_summary[rlid,] <- get_m_params(m)
# Plot QQ Plot
#lm_diagnose(m, rlid)
}
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
lm_diagnose(models[[rlid]], rlid)
}
write.csv(m_summary, "hv_model_results_2019-09.csv")
plot(m$fitted.values, m$residuals)
knitr::opts_chunk$set(echo=TRUE)
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
lm_diagnose(models[[rlid]], rlid)
ggplot() + geom_point(aes=(x = models[[rlid]]$fitted.values, y = models[[rlid]]$residuals))
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
lm_diagnose(models[[rlid]], rlid)
p <- qplot(y=models[[rlid]]$residuals, x=models[[rlid]]$fitted.values)
}
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
lm_diagnose(models[[rlid]], rlid)
qplot(y=models[[rlid]]$residuals, x=models[[rlid]]$fitted.values)
}
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
lm_diagnose(models[[rlid]], rlid)
plot_data <- data.frame(
fitted_values = models[[rlid]]$fitted.values,
residuals = models[[rlid]]$residuals
)
ggplot(plot_data, aes(x=fitted_values, y=residuals)) +
geom_point() +
geom_smooth(method=lm)
}
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
#lm_diagnose(models[[rlid]], rlid)
plot_data <- data.frame(
fitted_values = models[[rlid]]$fitted.values,
residuals = models[[rlid]]$residuals
)
ggplot(plot_data, aes(x=fitted_values, y=residuals)) +
geom_point() +
geom_smooth(method=lm)
}
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
#lm_diagnose(models[[rlid]], rlid)
plot_data <- data.frame(
fitted_values = models[[rlid]]$fitted.values,
residuals = models[[rlid]]$residuals
)
p <- (plot_data, aes(x=fitted_values, y=residuals)) +
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
#lm_diagnose(models[[rlid]], rlid)
plot_data <- data.frame(
fitted_values = models[[rlid]]$fitted.values,
residuals = models[[rlid]]$residuals
)
p <- ggplot(plot_data, aes(x=fitted_values, y=residuals)) +
geom_point() +
geom_smooth(method=lm)
p
}
p
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
#lm_diagnose(models[[rlid]], rlid)
plot_data <- data.frame(
fitted_values = models[[rlid]]$fitted.values,
residuals = models[[rlid]]$residuals
)
p <- ggplot(plot_data, aes(x=fitted_values, y=residuals)) +
geom_point() +
geom_smooth(method=lm)
p
}
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
#lm_diagnose(models[[rlid]], rlid)
plot_data <- data.frame(
fitted_values = models[[rlid]]$fitted.values,
residuals = models[[rlid]]$residuals
)
p <- ggplot(plot_data, aes(x=fitted_values, y=residuals)) +
geom_point() +
geom_smooth(method=lm)
print(p)
}
head(df)
ggplot(df, aes=(x=cdd_0, y=hvac_kWh)) + geom_point() + geom_smooth(method=lm)
ggplot(df, aes(x=cdd_0, y=hvac_kWh)) + geom_point() + geom_smooth(method=lm)
ggplot(df, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point() + geom_smooth(method=lm)
ggplot(df, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
#file_in <- "../data/hv_model_2019-09.csv"
file_in <- "../data/hv_model_2019-09_rmt.csv"
df <- read.csv(file_in)
ggplot(df, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
#file_in <- "../data/hv_model_2019-09.csv"
file_rmt <- "../data/hv_model_2019-09_rmt.csv"
file_sp <- "../data/hv_model_2019-09_sp.csv"
df_rmt <- read.csv(file_rmt)
df_sp <- read.csv(rile_sp)
#file_in <- "../data/hv_model_2019-09.csv"
file_rmt <- "../data/hv_model_2019-09_rmt.csv"
file_sp <- "../data/hv_model_2019-09_sp.csv"
df_rmt <- read.csv(file_rmt)
df_sp <- read.csv(file_sp)
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
View(df_rmt)
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
head(df_rmt)
asdf = df_rmt[df_rmt$Timestamp > "2019-09-05",]
#file_in <- "../data/hv_model_2019-09.csv"
file_rmt <- "../data/hv_model_2019-09_rmt.csv"
file_sp <- "../data/hv_model_2019-09_sp.csv"
df_rmt <- read.csv(file_rmt)
df_sp <- read.csv(file_sp)
# Convert Timestamp columns to date types
df_rmt$Timestamp <- as.Date(df_rmt$Timestamp, "%Y-%m-%d")
df_sp$Timestamp <- as.Date(df_sp$Timestamp, "%Y-%m-%d")
df_sp <- df_sp %>%
filter(Timestamp > as.Date("2019-09-05"))
df_sp <- df_sp %>%
filter(Timestamp > as.Date("2019-09-08"))
#file_in <- "../data/hv_model_2019-09.csv"
file_rmt <- "../data/hv_model_2019-09_rmt.csv"
file_sp <- "../data/hv_model_2019-09_sp.csv"
df_rmt <- read.csv(file_rmt)
df_sp <- read.csv(file_sp)
# Convert Timestamp columns to date types
df_rmt$Timestamp <- as.Date(df_rmt$Timestamp, "%Y-%m-%d")
df_sp$Timestamp <- as.Date(df_sp$Timestamp, "%Y-%m-%d")
df_sp <- df_sp %>%
filter(Timestamp > as.Date("2019-09-04")) %>%
filter(Timestamp < as.Date("2019-09-30"))
df_rmt <- df_sp %>%
filter(Timestamp > as.Date("2019-09-04")) %>%
filter(Timestamp < as.Date("2019-09-30"))
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
df_sp <- df_sp %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
df_rmt <- df_sp %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
df_sp <- df_sp %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
df_rmt <- df_sp %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
df_sp <- df_sp %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
df_rmt <- df_rmt %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
#file_in <- "../data/hv_model_2019-09.csv"
file_rmt <- "../data/hv_model_2019-09_rmt.csv"
file_sp <- "../data/hv_model_2019-09_sp.csv"
df_rmt <- read.csv(file_rmt)
df_sp <- read.csv(file_sp)
# Convert Timestamp columns to date types
df_rmt$Timestamp <- as.Date(df_rmt$Timestamp, "%Y-%m-%d")
df_sp$Timestamp <- as.Date(df_sp$Timestamp, "%Y-%m-%d")
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
#file_in <- "../data/hv_model_2019-09.csv"
file_rmt <- "../data/hv_model_2019-09_rmt.csv"
file_sp <- "../data/hv_model_2019-09_sp.csv"
df_rmt <- read.csv(file_rmt)
df_sp <- read.csv(file_sp)
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
# Convert Timestamp columns to date types
df_rmt$Timestamp <- as.Date(df_rmt$Timestamp, "%Y-%m-%d")
df_sp$Timestamp <- as.Date(df_sp$Timestamp, "%Y-%m-%d")
df_sp <- df_sp %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
df_rmt <- df_rmt %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh)) + geom_point() + geom_smooth()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh)) + geom_point() + geom_smooth(method=lm)
lm_eqn <- function(df){
m <- lm(hvac_kWh ~ cdd_0, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh)) +
geom_point() +
geom_smooth() +
geom_text(x=5, y=40, label = lm_eqn(df_sp), parse=TRUE)
lm_eqn <- function(df){
m <- lm(hvac_kWh ~ cdd_0, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh)) +
geom_point() +
geom_smooth(method=lm) +
geom_text(x=5, y=40, label = lm_eqn(df_sp), parse=TRUE)
knitr::opts_chunk$set(echo=TRUE)
#rm(list=ls())
library(ggplot2)
library(dplyr)
library(tidyverse)
library(plotly)
library(AppliedPredictiveModeling)
library(caret)
#library(e1071)
library(earth)
#library(leaps)
#library(boot)
#library(kernlab)
#library(randomForest)
library(hash)
get_m_params <- function(m){
if ("hdd_0" %in% rownames(summary(m)$coefficients)){
h_coef <- summary(m)$coefficients["hdd_0",1]
h_p <- summary(m)$coefficients["hdd_0",4]
}
else {
h_coef <- NA
h_p <- NA
}
if ("cdd_0" %in% rownames(summary(m)$coefficients)){
c_coef <- summary(m)$coefficients["cdd_0",1]
c_p <- summary(m)$coefficients["cdd_0",4]
}
else {
c_coef <- NA
c_p <- NA
}
intercept <- summary(m)$coefficients["(Intercept)",1]
r2 <- summary(m)$r.squared
rse <- summary(m)$sigma
m_values <- c(h_coef, c_coef, h_p, c_p, r2, rse, intercept)
return(m_values)
}
lm_diagnose <- function(lm_model, name=""){
# Model Summary
#print(paste("Model:", name))
#print(paste("Resid Standard Error:", summary(lm_model)$sigma))
#print(paste("R-Squared:", summary(lm_model)$r.squared))
# Histogram Standardized Residual
#hist(resid(lm_model)/sd(resid(lm_model)), main=paste(name, "Normalized Residual Histogram"), xlab="Standardized Residual", panel.first=grid(), breaks=23)
# QQ Plot Standardized Residual
qqnorm(resid(lm_model)/sd(resid(lm_model)), cex=0.5, main=paste(name, "Normalized QQ Plot"), ylab="Standardized Residual", panel.first=grid())
qqline(resid(lm_model)/sd(resid(lm_model)), col="red")
#plot(lm_model, panel.first=grid())
}
#file_in <- "../data/hv_model_2019-09.csv"
file_rmt <- "../data/hv_model_2019-09_rmt.csv"
file_sp <- "../data/hv_model_2019-09_sp.csv"
df_rmt <- read.csv(file_rmt)
df_sp <- read.csv(file_sp)
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=Timestamp)) + geom_point()
# Convert Timestamp columns to date types
df_rmt$Timestamp <- as.Date(df_rmt$Timestamp, "%Y-%m-%d")
df_sp$Timestamp <- as.Date(df_sp$Timestamp, "%Y-%m-%d")
df_sp <- df_sp %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
df_rmt <- df_rmt %>%
filter(Timestamp > as.Date("2019-09-05")) %>%
filter(Timestamp < as.Date("2019-09-29"))
ggplot(df_rmt, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh, color=RLID)) + geom_point()
lm_eqn <- function(df){
m <- lm(hvac_kWh ~ cdd_0, df);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,
list(a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)))
as.character(as.expression(eq));
}
ggplot(df_sp, aes(x=cdd_0, y=hvac_kWh)) +
geom_point() +
geom_smooth(method=lm) +
geom_text(x=5, y=40, label = lm_eqn(df_sp), parse=TRUE)
m_summary <- data.frame(hdd_coef = double(),
cdd_coef = double(),
hdd_p = double(),
cdd_p = double(),
r_square = double(),
RSE = double(),
intercept = double()
)
models <- hash() # hash object containing all model objects
for (rlid in unique(df$RLID)){
# Filter dataset for current RLID
tmp <- df[df$RLID == rlid, ]
# Fit linear model
m <- lm(hvac_kWh ~ cdd_0 + hdd_0, data=tmp)
# Save Model Results
models[[rlid]] <- m
m_summary[rlid,] <- get_m_params(m)
# Plot QQ Plot
#lm_diagnose(m, rlid)
}
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
#lm_diagnose(models[[rlid]], rlid)
plot_data <- data.frame(
fitted_values = models[[rlid]]$fitted.values,
residuals = models[[rlid]]$residuals
)
p <- ggplot(plot_data, aes(x=fitted_values, y=residuals)) +
geom_point() +
geom_smooth(method=lm)
print(p)
}
top_summary <- m_summary[order(-m_summary$r_square),] %>%
head()
# Plot Normal QQ-Plot for each model
for (rlid in rownames(top_summary)){
lm_diagnose(models[[rlid]], rlid)
plot_data <- data.frame(
fitted_values = models[[rlid]]$fitted.values,
residuals = models[[rlid]]$residuals
)
p <- ggplot(plot_data, aes(x=fitted_values, y=residuals)) +
geom_point() +
geom_smooth(method=lm)
print(p)
}
community_model <- lm(hvac_kWh ~ cdd_0 + hdd_0, data=df_sp)
community_model <- lm(hvac_kWh ~ cdd_0 + hdd_0, data=df_sp)
summary(community_model)
community_model <- lm(hvac_kWh ~ cdd_0 + hdd_0, data=df_sp)
summary(community_model)
lm_diagnose(community_model, "All Homes")
